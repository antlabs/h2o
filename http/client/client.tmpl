package {{.PackageName}}

import(
  "context"
  "fmt"

  "github.com/guonaihong/gout"
)

type {{.StructName}} struct {
  {{- range $key, $value := .InitField}}
    {{$key}} string
  {{- end}}
}

func New() *{{.StructName}} {
  rv := &{{.StructName}}{
  {{- range $key, $value := .InitField}}
    {{$key}}:{{$value|printf "%q"}},
  {{- end}}
  }
  rv.Init()
  return rv
}

// set xxx 成员函数
{{- $ReceiverName := .ReceiverName}}
{{- $StructName := .StructName}}
{{- range $key, $value := .InitField}}

func ({{$ReceiverName}} *{{$StructName}}) Set{{$key}} ({{$key}} string) *{{$StructName}} {
  {{$ReceiverName}}.{{$key}} = {{$key}}
  return {{$ReceiverName}} 
}
{{- end}}

// 成员函数

{{- range $_, $value := .AllFunc}}
func ({{$ReceiverName}} *{{$StructName}}) {{$value.HandlerName}}({{if $value.ReqName}}req *{{$value.ReqName}}{{end}}) (*{{$value.RespName}}, error) {
  return {{$ReceiverName}}.{{$value.HandlerName}}Ctx(context.TODO(), req)
}

// 可以通过ctx设置超时时间
func ({{$ReceiverName}} *{{$StructName}}) {{$value.HandlerName}}Ctx(ctx context.Context, {{if $value.ReqName}}req *{{$value.ReqName}}{{end}}) (*{{$value.RespName}}, error) {

  {{if $value.RespName}}var resp {{$value.RespName}}{{end}}

  {{- range $_, $val := .DefReqHeader}}
  {{- if $val.IsString}}
  if len(req.Header.{{$val.Key}}) == 0 {
    req.Header.{{$val.Key}} = {{$val.Val|printf "%q"}}
  }
  {{- end}}
  {{- if $val.IsInt}}
  if req.Header.{{$val.Key}} == 0 {
    req.Header.{{$val.Key}} = {{$val.Val}}
  }
  {{- end}}
  {{- if $val.IsFloat64}}
  if req.Header.{{$val.Key}} == 0.0 {
    req.Header.{{$val.Key}} = {{$val.Val}}
  }
  {{- end}}
  {{- end}}

  {{- range $_, $val := .DefReqBody}}

  {{- if $val.IsString}}
  if len(req.Body.{{$val.Key}}) == 0 {
    req.Body.{{$val.Key}} = {{$val.Val|printf "%q"}}
  }
  {{- end}}
  {{- if $val.IsInt}}
  if req.Body.{{$val.Key}} == 0 {
    req.Body.{{$val.Key}} = {{$val.Val}}
  }
  {{- end}}
  {{- if $val.IsFloat64}}
  if req.Body.{{$val.Key}} == 0.0 {
    req.Body.{{$val.Key}} = {{$val.Val}}
  }
  {{- end}}
  {{- end}}

  code := 0
  badBody := ""
  err := gout.{{.Method}}({{$value.URL|printf "%q"}}{{if $value.URLTemplate}}, *{{$ReceiverName}}{{end}}).
  RequestUse({{$ReceiverName}}). //请求中件间，调用ModifyRequest函数
  {{- if .HaveHeader}}.
  SetHeader(req.Header)
  {{- end}}{{- if .HaveQuery}}.
  SetQuery(req.Query){{end}}{{if .HaveReqBody}}.
  {{- if .ReqWWWForm}}
  SetWWWForm(req.Body)
  {{- else}}
  SetJSON(req.Body)
  {{- end}}{{end}}.
  WithContext(ctx).
  {{- if .HaveRespBody}}
  Callback(func(c *gout.Context) (err error) {

    switch {
    case c.Code >= 200 && c.Code <= 299: //http code为200-299范围内认为是正确
      c.BindJSON(&resp.Body)
    default: //http code不是200时
      c.BindBody(&badBody)
    }
    code = c.Code
    return nil
  }).{{end}}
  Do()
  if err != nil {
    return nil,err
  }

  if code != 200 {
    return nil, fmt.Errorf("{{$value.HandlerName}} code(%d) != 200, badbody(%s)", code, badBody)
  }
  return &resp, nil
}
{{end}}
